import { DatabaseHelper } from '../types';
import { KNEX_TYPES } from '@directus/shared/constants';
import { Knex } from 'knex';
type Clients = 'mysql' | 'postgres' | 'cockroachdb' | 'sqlite' | 'oracle' | 'mssql' | 'redshift';
export type Options = {
    nullable?: boolean;
    default?: any;
    length?: number;
};
export declare abstract class SchemaHelper extends DatabaseHelper {
    isOneOfClients(clients: Clients[]): boolean;
    changeNullable(table: string, column: string, nullable: boolean): Promise<void>;
    changeToType(table: string, column: string, type: typeof KNEX_TYPES[number], options?: Options): Promise<void>;
    protected changeToTypeByCopy(table: string, column: string, type: typeof KNEX_TYPES[number], options: Options): Promise<void>;
    preColumnChange(): Promise<boolean>;
    postColumnChange(): Promise<void>;
    constraintName(existingName: string): string;
    applyLimit(rootQuery: Knex.QueryBuilder, limit: number): void;
    applyOffset(rootQuery: Knex.QueryBuilder, offset: number): void;
    castA2oPrimaryKey(): string;
    applyMultiRelationalSort(knex: Knex, dbQuery: Knex.QueryBuilder, table: string, primaryKey: string, orderByString: string, orderByFields: Knex.Raw[]): Knex.QueryBuilder;
    formatUUID(uuid: string): string;
}
export {};
